version: '3.9'

x-backend-common: &backend-common
  build:
    context: ./backend
    dockerfile: ../docker/backend/Dockerfile
  environment:
    - PYTHONUNBUFFERED=1
    - REDIS_URL=redis://redis:6379
    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multiagent
  volumes:
    - ./backend:/app
  depends_on:
    - postgres
    - redis

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: multiagent
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    <<: *backend-common
    container_name: multiagent-backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    env_file:
      - .env

  # Frontend Static HTML
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.simple
    container_name: multiagent-frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
    ports:
      - "3000:80"
    depends_on:
      - backend

  # Nginx Reverse Proxy (optional for development)
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: multiagent-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data: